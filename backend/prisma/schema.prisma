// Prisma schema for Viet Baguette

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  role        Role     @default(EMPLOYEE)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
  notifications Notification[]
  schedule    Schedule[]
  invitedBy   String?
}

enum Role {
  OWNER
  ADMIN
  EMPLOYEE
}

model MenuItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id          String      @id @default(uuid())
  createdBy   User        @relation(fields: [createdById], references: [id])
  createdById String
  status      OrderStatus @default(PENDING)
  isVIP       Boolean     @default(false)
  isUrgent    Boolean     @default(false)
  total       Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
  notifications Notification[]
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  DONE
  CANCELLED
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  menuItem  MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  quantity  Int      @default(1)
  status    ItemStatus @default(PENDING)
  notes     String?
}

enum ItemStatus {
  PENDING
  IN_PROGRESS
  DONE
  CANCELLED
}

model Notification {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Schedule {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  start     DateTime
  end       DateTime
  isAvailable Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 